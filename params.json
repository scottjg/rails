{"name":"Rails","tagline":"Ruby on Rails","body":"## Welcome to Rails\r\n\r\nRails is a web-application framework that includes everything needed to\r\ncreate database-backed web applications according to the\r\n[Model-View-Controller (MVC)](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)\r\npattern.\r\n\r\nUnderstanding the MVC pattern is key to understanding Rails. MVC divides your\r\napplication into three layers, each with a specific responsibility.\r\n\r\nThe _View layer_ is composed of \"templates\" that are responsible for providing\r\nappropriate representations of your application's resources. Templates can\r\ncome in a variety of formats, but most view templates are HTML with embedded\r\nRuby code (ERB files).\r\n\r\nThe _Model layer_ represents your domain model (such as Account, Product,\r\nPerson, Post, etc.) and encapsulates the business logic that is specific to\r\nyour application. In Rails, database-backed model classes are derived from\r\n`ActiveRecord::Base`. Active Record allows you to present the data from\r\ndatabase rows as objects and embellish these data objects with business logic\r\nmethods. Although most Rails models are backed by a database, models can also\r\nbe ordinary Ruby classes, or Ruby classes that implement a set of interfaces\r\nas provided by the Active Model module. You can read more about Active Record\r\nin its [README](activerecord/README.rdoc).\r\n\r\nThe _Controller layer_ is responsible for handling incoming HTTP requests and\r\nproviding a suitable response. Usually this means returning HTML, but Rails\r\ncontrollers can also generate XML, JSON, PDFs, mobile-specific views, and\r\nmore. Controllers manipulate models and render view templates in order to\r\ngenerate the appropriate HTTP response.\r\n\r\nIn Rails, the Controller and View layers are handled together by Action Pack.\r\nThese two layers are bundled in a single package due to their heavy interdependence.\r\nThis is unlike the relationship between Active Record and Action Pack, which are\r\nindependent. Each of these packages can be used independently outside of Rails. You\r\ncan read more about Action Pack in its [README](actionpack/README.rdoc).\r\n\r\n## Getting Started\r\n\r\n1. Install Rails at the command prompt if you haven't yet:\r\n\r\n        gem install rails\r\n\r\n2. At the command prompt, create a new Rails application:\r\n\r\n        rails new myapp\r\n\r\n   where \"myapp\" is the application name.\r\n\r\n3. Change directory to `myapp` and start the web server:\r\n\r\n        cd myapp\r\n        rails server\r\n\r\n   Run with `--help` or `-h` for options.\r\n\r\n4. Go to http://localhost:3000 and you'll see: \"Welcome aboard: You're riding Ruby on Rails!\"\r\n\r\n5. Follow the guidelines to start developing your application. You may find\r\n   the following resources handy:\r\n    * [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html)\r\n    * [Ruby on Rails Guides](http://guides.rubyonrails.org)\r\n    * [The API Documentation](http://api.rubyonrails.org)\r\n    * [Ruby on Rails Tutorial](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book)\r\n\r\n## Contributing\r\n\r\nWe encourage you to contribute to Ruby on Rails! Please check out the\r\n[Contributing to Ruby on Rails guide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for guidelines about how to proceed. [Join us!](http://contributors.rubyonrails.org)\r\n\r\n## Code Status\r\n\r\n* [![Build Status](https://api.travis-ci.org/rails/rails.png)](https://travis-ci.org/rails/rails)\r\n* [![Dependencies](https://gemnasium.com/rails/rails.png?travis)](https://gemnasium.com/rails/rails)\r\n\r\n## License\r\n\r\nRuby on Rails is released under the [MIT License](http://www.opensource.org/licenses/MIT).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}